apiVersion: extensions/v1beta1
kind: Deployment
metadata:
    name: {{ template "logstash-exporter.fullname" . }}
    labels:
        chart: {{ template "logstash-exporter.chart" . }}
        app: {{ template "logstash-exporter.name" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
spec:
    replicas: {{ .Values.replicaCount }}
    selector:
        matchLabels:
            app: {{ template "logstash-exporter.name" . }}
            release: {{ .Release.Name }}
    strategy:
        rollingUpdate:
            maxSurge: 1
            maxUnavailable: 0
        type: RollingUpdate
    template:
        metadata:
            labels:
                app: {{ template "logstash-exporter.name" . }}
                release: {{ .Release.Name }}
            {{- if .Values.podAnnotations }}
            annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
            {{- end }}
        spec:
            {{- if .Values.serviceAccount.create  }}
            serviceAccountName: {{ template "logstash-exporter.fullname" . }}
            {{- else }}
            serviceAccountName: {{ .Values.serviceAccount.name }}
            {{- end }}
            {{- if .Values.priorityClassName }}
            priorityClassName: {{ .Values.priorityClassName }}
            {{- end }}
            {{- if .Values.image.pullSecret }}
            imagePullSecrets:
                - name: {{ .Values.image.pullSecret }}
            {{- end }}
            restartPolicy: {{ .Values.restartPolicy }}
            {{- if .Values.securityContext.enabled }}
            securityContext:
                runAsNonRoot: true
                runAsUser: {{ .Values.securityContext.runAsUser }}
            {{- end }}
            containers:
                - name: {{ .Chart.Name }}
                  {{- if .Values.env }}
                  env:
                  {{- range $key, $value := .Values.env }}
                  - name: {{ $key }}
                    value: {{ $value }}
                  {{- end }}
                  {{- end }}
                  {{- if .Values.envFromSecret }}
                  envFrom:
                  - secretRef:
                        name: {{ .Values.envFromSecret }}
                  {{- end }}
                  image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  command: [
                    {{- if .Values.ls.uri }}
                    "--logstash.endpoint={{ .Values.ls.uri }}",
                    {{- end }}
                    {{- if .Values.ls.loglevel }}
                    "--log.level={{ .Values.ls.loglevel }}",
                    {{- end }}
                    "--web.listen-address={{ .Values.service.httpPort }}"
                  ]
                  volumeMounts:
                    {{- range .Values.secretMounts }}
                    - name: {{ .name }}
                      mountPath: {{ .path }}
                      {{- if .subPath }}
                      subPath: {{ .subPath }}
                      {{- end }}
                    {{- end }}
            {{- if .Values.nodeSelector }}
            nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
            {{- end }}
            {{- if .Values.tolerations }}
            tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
            {{- end }}
            {{- if .Values.affinity }}
            affinity:
{{ toYaml .Values.affinity | indent 8 }}
            {{- end }}
            volumes:
                {{- range .Values.secretMounts }}
                - name: {{ .name }}
                  secret:
                    secretName: {{ .secretName }}
                {{- end }}